# ------------------------------------------------------------------------------
#
# Dotfiles App Configuration
#
#
# Version: 0.0.1
# Last Modified: 2025-03-23
#
# - Reference
#   - DOTFILES_USER_APP_ARR
#
# - Environment Variable
#   - DOTFILES_APP_ARR
#
# - Helper Function
#   - is_dotfiles_managed_app
#
# ------------------------------------------------------------------------------


# Clear any existing variables
unset DOTFILES_APP_ARR

# Check if DOTFILES_USER_APP_ARR is declared AND not empty
if [[ -v DOTFILES_USER_APP_ARR ]] && [[ ${#DOTFILES_USER_APP_ARR[@]} -gt 0 ]]; then

    # Verify DOTFILES_USER_APP_ARR is an array
    if [[ "$(typeset -p DOTFILES_USER_APP_ARR 2>/dev/null)" =~ "typeset -a" ]]; then

        # Create associative array from regular array
        typeset -A DOTFILES_APP_ARR
        for app_name in "${DOTFILES_USER_APP_ARR[@]}"; do
            DOTFILES_APP_ARR[$app_name]="true"
        done
    else
        echo "Warning: DOTFILES_USER_APP_ARR exists but is not an array, using defaults" >&2

        # Explicitly unset to trigger default loading
        unset DOTFILES_APP_ARR
    fi
fi

# Define default list of managed applications if DOTFILES_APP_ARR is not set or is empty
if [[ ! -v DOTFILES_APP_ARR ]] || [[ ${#DOTFILES_APP_ARR[@]} -eq 0 ]]; then

    typeset -a _app_arr=(
        "7z"
        # "alt-tab"
        "autoenv"
        # "aws"
        # "clojure"
        "coreutils"
        "docker"
        # "elasticsearch"
        # "emacs"
        # "gcp"
        # "golang"
        "htop"
        # "iterm"
        "jdk"
        # "keyd"
        # "kube"
        # "meilisearch"
        # "nvtop"
        # "nvitop"
        # "openvpn"
        "python"
        "pyenv"
        "svn"
        "tmux"
        "tree"
        # "vim"
        # "volta"
        # "vscode"
        "watch"
    )

    # Create associative array for lookups
    typeset -A DOTFILES_APP_ARR
    for app_name in "${_app_arr[@]}"; do
        DOTFILES_APP_ARR[$app_name]="true"
    done

    # Clean up
    unset _app_arr
fi

# Check if an application is in the managed list
# Usage: is_dotfiles_managed_app "app_name"
# Returns: 0 if managed, 1 if not managed, 2 if no argument provided
is_dotfiles_managed_app() {
    if [[ -z "$1" ]]; then
        echo "Error: No application name provided" >&2
        return 2
    fi
    [[ "${DOTFILES_APP_ARR[$1]}" == "true" ]]
}
