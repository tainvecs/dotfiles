# ------------------------------------------------------------------------------
#
# Dotfiles Plugin Configuration
#
#
# Version: 0.0.1
# Last Modified: 2025-03-23
#
# - Reference
#   - DOTFILES_USER_PLUGIN_ARR
#
# - Environment Variable
#   - DOTFILES_PLUGIN_ARR
#
# - Helper Function
#   - is_dotfiles_managed_plugin
#
# ------------------------------------------------------------------------------


# Clear any existing variables
unset DOTFILES_PLUGIN_ARR

# Check if DOTFILES_USER_PLUGIN_ARR is declared AND not empty
if [[ -v DOTFILES_USER_PLUGIN_ARR ]] && [[ ${#DOTFILES_USER_PLUGIN_ARR[@]} -gt 0 ]]; then

    # Verify DOTFILES_USER_PLUGIN_ARR is an array
    if [[ "$(typeset -p DOTFILES_USER_PLUGIN_ARR 2>/dev/null)" =~ "typeset -a" ]]; then

        # Create associative array from regular array
        typeset -A DOTFILES_PLUGIN_ARR
        for plugin_name in "${DOTFILES_USER_PLUGIN_ARR[@]}"; do
            DOTFILES_PLUGIN_ARR[$plugin_name]="true"
        done
    else
        echo "Warning: DOTFILES_USER_PLUGIN_ARR exists but is not an array, using defaults" >&2

        # Explicitly unset to trigger default loading
        unset DOTFILES_PLUGIN_ARR
    fi
fi

# Define default list of managed plugins if DOTFILES_PLUGIN_ARR is not set or is empty
if [[ ! -v DOTFILES_PLUGIN_ARR ]] || [[ ${#DOTFILES_PLUGIN_ARR[@]} -eq 0 ]]; then

    typeset -a _plugin_arr=(

        "bat"
        "bat-extras"
        # "bottom"
        # "copybuffer"
        "delta"
        # "docker-credential-helpers"
        # "duf"
        # "dust"
        "exa"
        "extract"
        "fast-syntax-highlighting"
        "fd"
        "forgit"
        "fzf"
        # "hyperfine"
        # "lazydocker"
        "p10k"
        # "peco"
        "ripgrep"
        "universalarchive"
        # "urltools"
        "z"
        "zsh-autosuggestions"
        "zsh-completions"

        # "dotfiles-aws"
        # "dotfiles-docker"
        # "dotfiles-es"
        # "dotfiles-fail2ban"
        "dotfiles-git"
        # "dotfiles-info"
        # "dotfiles-kube"
        # "dotfiles-mac"
        "dotfiles-misc"
        # "dotfiles-ms"
        # "dotfiles-network"
        "dotfiles-update"
        # "dotfiles-vim"

    )

    # Create associative array for lookups
    typeset -A DOTFILES_PLUGIN_ARR
    for plugin_name in "${_plugin_arr[@]}"; do
        DOTFILES_PLUGIN_ARR[$plugin_name]="true"
    done

    # Clean up
    unset _plugin_arr
fi

# Check if a plugin is in the managed list
# Usage: is_dotfiles_managed_plugin "plugin_name"
# Returns: 0 if managed, 1 if not managed, 2 if no argument provided
is_dotfiles_managed_plugin() {
    if [[ -z "$1" ]]; then
        echo "Error: No plugin name provided" >&2
        return 2
    fi
    [[ "${DOTFILES_PLUGIN_ARR[$1]}" == "true" ]]
}
