

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi


# ------------------------------------------------------------------------------
# parameter
# ------------------------------------------------------------------------------


OS_TYPE=`uname`
MOTD_FILE='/etc/dynmotd'


# ------------------------------------------------------------------------------
# option
# ------------------------------------------------------------------------------


shopt -s checkwinsize
export TERM=xterm-256color

export PS1="\[$(tput bold)\]\[\033[38;5;228m\]\u\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;15m\]@\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;156m\]\h\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;15m\]:\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;222m\][\w]\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;15m\]\\$ \[$(tput sgr0)\]"

export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL="en_US.UTF-8"

export VISUAL=vim
export EDITOR="$VISUAL"
export GIT_EDITOR="$VISUAL"


# ------------------------------------------------------------------------------
# bash alias
# ------------------------------------------------------------------------------


alias l='ls -CF'
alias lsgroup='cut -d: -f1 /etc/group | sort'


if [ "$OS_TYPE" == 'Linux' ]; then

    alias ls='ls --color=auto'                          # ls with color
    alias ll='ls --color=auto -hl'                      # list file
    alias la='ls --color=auto -a'                       # show all file
    alias lh='ls --color=auto -hld .?*'                 # show hidden files

    alias dir='du -h -d 1 | sort -hr'                   # show disk usage of current directory
    alias meminfo='free -html'                          # show memory information
    alias sysinfo="cat /etc/lsb-release && uname -a"    # show system info of ubuntu

elif [ "$OS_TYPE" == 'Darwin' ]; then

    alias ls='ls -G'                                    # ls with color
    alias ll='ls -Ghl'                                  # list file
    alias la='ls -Ga'                                   # show all file
    alias lh='ls -Ghld .?*'                             # show hidden files

    if ! hash gsort 2>/dev/null; then                   # show disk usage of current directory
        alias dir='du -hs'
    else
        alias dir='du -h -d 1 | gsort -hr'
    fi

fi

if hash python3 2>/dev/null; then
    alias python="python3"
fi


# ------------------------------------------------------------------------------
# bash function
# ------------------------------------------------------------------------------


extract(){

    if [ -f $1 ]; then
        case $1 in
            *.tar)      tar xvf $1      ;;
            *.gz)       gunzip $1       ;;
            *.tar.gz)   tar zxvf $1     ;;
            *.bz)       bunzip2 $1      ;;
            *.tar.bz)   tar jxvf $1     ;;
            *.bz2)      bunzip2 $1      ;;
            *.tar.bz2)  tar jxvf $1     ;;
            *.xz)       xz -d $1        ;;
            *.tar.xz)   tar Jxvf $1     ;;
            *.Z)        uncompress $1   ;;
            *.tar.Z)    tar Zxvf $1     ;;
            *.tgz)      tar zxvf $1     ;;
            *.tar.tgz)  tar zxvf $1     ;;
            *.7z)       7z x $1         ;;
            *.zip)      unzip $1        ;;
            *.rar)      unrar e $1      ;;
            *.tbz2)     tar jxvf $1     ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi

}

if [ -f $MOTD_FILE ]; then

    motd() {
        clear
        php -f $MOTD_FILE | bash
    }

    php -f /etc/dynmotd | bash

fi

space_file(){
    tmp_str=$(head -c $1 < /dev/zero | tr '\0' ' ')
    sed "s_^_${tmp_str}_" $2 > $3
}

if hash jupyter 2>/dev/null; then

    jpn-server(){
    
        case $1 in
            "local" )
                jupyter notebook --no-browser;;
            "ssh" )
                jupyter notebook --no-browser --port=$2;;
            * ) echo "format jpn-server {local|ssh} ssh_port";;
        esac
    }
    
    jpn-client(){
    
        case $1 in
            "Start"|"start" )
                ssh -N -f -L localhost:$2:localhost:$2 $3;;
            "Stop"|"stop" )
                for pid in $(ps aux | grep -E "[localhost]:$2.*$3" | awk '{print $2}'); do
                    echo $pid;
                    kill -9 $pid;
                done;;
            * ) echo "format: jpn-client {start|stop} ssh_port ssh_host";;
        esac
    
    }

fi
