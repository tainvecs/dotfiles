

# ------------------------------------------------------------------------------
# color variables
# ------------------------------------------------------------------------------


D="\033[01;30m" # Dark Gray
R="\033[01;31m" # RED
G="\033[01;32m" # GREEN
Y="\033[01;33m" # Yellow
B="\033[01;34m" # BLUE
M="\033[01;35m" # Magenta
C="\033[01;36m" # Cyan
W="\033[01;37m" # WHITE
RESET="\033[0m"


# ------------------------------------------------------------------------------
# bash function
# ------------------------------------------------------------------------------


# $1: used, $2: total
function get_used_percentage(){

    used_num=`echo $1 | sed 's/[^0-9]*$//'`
    total_num=`echo $2 | sed 's/[^0-9]*$//'`

    if [ "$total_num" == '0' ]; then
        used_percentage=' 0'
    else
        used_percentage=$(echo "scale=2; $used_num/$total_num" | bc | sed 's/^\.//' | sed 's/^0/ /')
    fi

    if [ "$used_percentage" == ' ' ]; then
        used_percentage=' 0'
    fi

    echo '#'$used_percentage

}


# ------------------------------------------------------------------------------
# date, username, hostname, kernel
# ------------------------------------------------------------------------------


_os_type=`uname`


# date
DATE=`date +%Y-%m-%d\ %H:%M:%S`


# username
USERNAME=`whoami`


# hostname
HOSTNAME=`hostname`


# kernel
KERNEL=`uname -r`


# ------------------------------------------------------------------------------
# cpu
# ------------------------------------------------------------------------------


if [ "$_os_type" == 'Linux' ]; then

    CPU=`cat /proc/cpuinfo | grep -m 1 "model name" | awk -F ": " '{print $2}'`

elif [ "$_os_type" == 'Darwin' ]; then

    CPU=`sysctl machdep.cpu.brand_string | cut -d ":" -f 2 | sed 's/^[\ ]*//'`

fi


# ------------------------------------------------------------------------------
# uptime
# ------------------------------------------------------------------------------


if [ "$_os_type" == 'Linux' ]; then

    UPTIME=`uptime -p`

elif [ "$_os_type" == 'Darwin' ]; then

    boottime=`sysctl -n kern.boottime | cut -c9-18`
    unixtime=`date +%s`
    upsec=$((unixtime-boottime))

    seconds=$(( upsec%60 ))
    minutes=$(( (upsec/60)%60 ))
    hours=$(( (upsec/(60*60))%24 ))
    days=$(( upsec/(24*60*60) ))

    if (( $seconds < 10 )); then seconds='0'$seconds;  fi
    if (( $minutes < 10 )); then minutes='0'$minutes;  fi
    if (( $hours < 10 )); then hours='0'$hours;  fi
    if (( $days < 2 )); then days=$days' day, ';  else  days=$days' days, '; fi

    UPTIME=$days$hours':'$minutes':'$seconds

fi


# ------------------------------------------------------------------------------
# disk (GB)
# ------------------------------------------------------------------------------


# disk
if [ "$_os_type" == 'Linux' ]; then

    DISK_USED_GB=`df -h --total | grep total | head -n 1 | awk {'print $3'} | sed 's/G$//'`
    DISK_TOTAL_GB=`df -h --total | grep total | head -n 1 | awk {'print $2'} | sed 's/G$//'`

elif [ "$_os_type" == 'Darwin' ]; then

    DISK_USED_GB=`df -h | grep /dev | head -n 1 | awk {'print $3'} | sed 's/Gi$//'`
    DISK_TOTAL_GB=`df -h | grep /dev | head -n 1 | awk {'print $2'} | sed 's/Gi$//'`

fi

DISK_USED_PERCENTAGE=$(get_used_percentage $DISK_USED_GB $DISK_TOTAL_GB)
DISK=${DISK_USED_PERCENTAGE:1}'% ('$DISK_USED_GB' GB used out of '$DISK_TOTAL_GB' GB)'


# ------------------------------------------------------------------------------
# memory (GB)
# ------------------------------------------------------------------------------


if [ "$_os_type" == 'Linux' ]; then

    # byte
    MEM_USED_BYTE=`free -b | head -n 2 | tail -n 1 | awk {'print $3'}`
    MEM_TOTAL_BYTE=`free -b | head -n 2 | tail -n 1 | awk {'print $2'}`

elif [ "$_os_type" == 'Darwin' ]; then

    # byte
    MEM_FREE_BLOCKS=`vm_stat | grep free | awk '{ print $3 }' | sed 's/\.//'`
    MEM_SPEC_BLOCKS=`vm_stat | grep speculative | awk '{ print $3 }' | sed 's/\.//'`
    MEM_FREE_BYTE=$(( ($MEM_FREE_BLOCKS + $MEM_SPEC_BLOCKS)*4096 ))
    MEM_TOTAL_BYTE=`sysctl hw.memsize | cut -d ":" -f 2 | sed 's/^[\ ]*//'`
    MEM_USED_BYTE=$(( $MEM_TOTAL_BYTE - $MEM_FREE_BYTE ))

fi

# byte to gigabyte
MEM_USED_GB=$(echo "scale=2; $MEM_USED_BYTE/1024/1048576" | bc | sed 's/^[0]*//' | sed 's/^\./0./')
MEM_TOTAL_GB=$(echo "scale=2; $MEM_TOTAL_BYTE/1024/1048576" | bc | sed 's/^[0]*//' | sed 's/^\./0./')

if [ "$MEM_USED_GB" == '' ] || [ "$MEM_USED_GB" == '0.00' ]; then
    MEM_USED_GB='0'
fi

if [ "$MEM_TOTAL_GB" == '' ] || [ "$MEM_TOTAL_GB" == '0.00' ]; then
    MEM_TOTAL_GB='0'
fi

MEM_USED_PERCENTAGE=$(get_used_percentage $MEM_USED_BYTE $MEM_TOTAL_BYTE)
MEMORY=${MEM_USED_PERCENTAGE:1}'% ('$MEM_USED_GB' GB used out of '$MEM_TOTAL_GB' GB)'


# ------------------------------------------------------------------------------
# swap (GB)
# ------------------------------------------------------------------------------


if [ "$_os_type" == 'Linux' ]; then

    # mega byte
    SWAP_USED_MB=`free -m | tail -n 1 | awk {'print $3'}`
    SWAP_TOTAL_MB=`free -m | tail -n 1 | awk {'print $2'}`

elif [ "$_os_type" == 'Darwin' ]; then

    # mega byte
    SWAP_USED_MB=`sysctl -a | grep swap | awk '{ print $7 }' | sed 's/\..*//'`
    SWAP_TOTAL_MB=`sysctl -a | grep swap | awk '{ print $4 }' | sed 's/\..*//'`

fi

# megabyte to gigabyte
SWAP_USED_GB=$(echo "scale=2; $SWAP_USED_MB/1024" | bc | sed 's/^[0]*//' | sed 's/^\./0./')
SWAP_TOTAL_GB=$(echo "scale=2; $SWAP_TOTAL_MB/1024" | bc | sed 's/^[0]*//' | sed 's/^\./0./')

if [ "$SWAP_USED_GB" == '' ] || [ "$SWAP_USED_GB" == '0.00' ]; then
    SWAP_USED_GB='0'
fi

if [ "$SWAP_TOTAL_GB" == '' ] || [ "$SWAP_TOTAL_GB" == '0.00' ]; then
    SWAP_TOTAL_GB='0'
fi

SWAP_USED_PERCENTAGE=$(get_used_percentage $SWAP_USED_GB $SWAP_TOTAL_GB)
SWAP=${SWAP_USED_PERCENTAGE:1}'% ('$SWAP_USED_GB' GB used out of '$SWAP_TOTAL_GB' GB)'


# ------------------------------------------------------------------------------
# processes
# ------------------------------------------------------------------------------


TEMP_STR=`ps aux | wc -l`
PROCESSES_NUM=${TEMP_STR//[[:blank:]]/}
PROCESSES_MAX=`ulimit -u`
PROCESSES_USED_PERCENTAGE=$(get_used_percentage $PROCESSES_NUM $PROCESSES_MAX)
PROCESSES=${PROCESSES_USED_PERCENTAGE:1}'% ('$PROCESSES_NUM' of '$PROCESSES_MAX' MAX)'


# ------------------------------------------------------------------------------
# motd ascii
# ------------------------------------------------------------------------------


echo -e "                                                                    "
echo -e " $W "
echo -e "#===========================:\033[01;5;31m Information $RESET$W:===========================#"
echo -e "   $R Date         $W=     $B$DATE "
echo -e "   $R User         $W=     $B$USERNAME "
echo -e "   $R Hostname     $W=     $B$HOSTNAME "
echo -e "   $R CPU          $W=     $B$CPU "
echo -e "   $R Kernel       $W=     $B$KERNEL "
echo -e "   $R Uptime       $W=     $B$UPTIME "
echo -e "   $R Processes    $W=     $B$PROCESSES "
echo -e "   $R Disk         $W=     $B$DISK "
echo -e "   $R Memory       $W=     $B$MEMORY "
echo -e "   $R Swap         $W=     $B$SWAP "
#echo -e "   $R ADDRESS      $W=     $B$ADDRESS "
echo -e "$W#=====================================================================#$RESET"
echo -e " "
